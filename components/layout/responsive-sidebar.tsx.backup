'use client';

import React, { useEffect, useState } from 'react';
import { usePathname, useRouter } from 'next/navigation';
import {
    Drawer,
    List,
    ListItem,
    ListItemButton,
    ListItemIcon,
    ListItemText,
    Box,
    Typography,
    IconButton,
    Tooltip,
    useTheme,
    Avatar,
    Badge,
    Collapse,
    Fade,
    useMediaQuery,
} from '@mui/material';
import { styled, alpha } from '@mui/material/styles';
import {
    ExpandLess,
    ExpandMore,
    Dashboard as DashboardIcon,
    People as UsersIcon,
    ContactPhone as ContactIcon,
    Assignment as TicketIcon,
    Chat as MessageCircleIcon,
    TrendingUp,
    BarChart as BarChart3Icon,
    Settings as SettingsIcon,
    ChevronLeft,
    ChevronRight,
    Business as Building2Icon,
    LocalActivity as ActivityIcon,
    CalendarToday as CalendarIcon,
    Work as BriefcaseIcon,
    MyLocation as TargetIcon,
    Description as FileTextIcon,
    Psychology as BrainIcon,
    Inventory as PackageIcon,
    Person as UserIcon,
    Email as MailIcon,
    Close as CloseIcon,
} from '@mui/icons-material';

// کامپوننت استایل شده برای Drawer با طراحی بهبود یافته
const StyledDrawer = styled(Drawer)(({ theme }) => ({
    '& .MuiDrawer-paper': {
        backgroundColor: alpha(theme.palette.background.paper, 0.98),
        backgroundImage: `linear-gradient(135deg, ${alpha(theme.palette.primary.main, 0.02)} 0%, ${alpha(theme.palette.secondary.main, 0.02)} 50%, ${alpha(theme.palette.info.main, 0.02)} 100%)`,
        overflowX: 'hidden',
        borderLeft: `1px solid ${alpha(theme.palette.divider, 0.1)}`,
        boxShadow: '0 8px 32px rgba(0, 0, 0, 0.12)',
        backdropFilter: 'blur(20px)',
        transition: theme.transitions.create(['width', 'margin', 'transform'], {
            easing: theme.transitions.easing.easeInOut,
            duration: theme.transitions.duration.standard,
        }),
        '&::-webkit-scrollbar': {
            width: '6px',
        },
        '&::-webkit-scrollbar-track': {
            background: 'transparent',
        },
        '&::-webkit-scrollbar-thumb': {
            background: `linear-gradient(135deg, ${alpha(theme.palette.primary.main, 0.6)} 0%, ${alpha(theme.palette.info.main, 0.6)} 100%)`,
            borderRadius: '8px',
            '&:hover': {
                background: `linear-gradient(135deg, ${theme.palette.primary.main} 0%, ${theme.palette.info.main} 100%)`,
            },
        },
    },
}));

interface NavItem {
    title: string;
    href: string;
    icon: React.ComponentType<any>;
    badge?: string;
    children?: NavItem[];
}

interface Module {
    id: string;
    name: string;
    display_name: string;
    route: string;
    icon: string;
    sort_order: number;
    parent_id?: string;
}

// نقشه آیکون‌ها
const iconMap: { [key: string]: React.ComponentType<any> } = {
    'Home': DashboardIcon,
    'LayoutDashboard': DashboardIcon,
    'Users': UsersIcon,
    'Users2': TargetIcon,
    'UserCheck': ContactIcon,
    'Activity': ActivityIcon,
    'MessageCircle': MessageCircleIcon,
    'MessageCircle2': MessageCircleIcon,
    'DollarSign': TrendingUp,
    'BarChart3': BarChart3Icon,
    'Calendar': CalendarIcon,
    'User': ContactIcon,
    'Settings': SettingsIcon,
    'Target': TargetIcon,
    'Briefcase': BriefcaseIcon,
    'Ticket': TicketIcon,
    'ChevronRight': ChevronRight,
    'Building2': Building2Icon,
    'TrendingUp': TrendingUp,
    'FileText': FileTextIcon,
    'Brain': BrainIcon,
    'Package': PackageIcon,
    'Mail': MailIcon,
};

// نقشه نام‌های نمایشی روت‌ها
const routeDisplayNames: { [key: string]: string } = {
    '/dashboard': 'داشبورد',
    '/dashboard/customers': 'مشتریان',
    '/dashboard/contacts': 'مخاطبین',
    '/dashboard/coworkers': 'همکاران',
    '/dashboard/activities': 'فعالیت‌ها',
    '/dashboard/chat': 'چت',
    '/dashboard/customer-club': 'باشگاه مشتریان',
    '/dashboard/deals': 'معاملات',
    '/dashboard/feedback': 'بازخوردها',
    '/dashboard/reports': 'گزارش‌ها',
    '/dashboard/daily-reports': 'گزارش‌های روزانه',
    '/dashboard/insights/reports-analysis': 'تحلیل گزارشات',
    '/dashboard/calendar': 'تقویم',
    '/dashboard/profile': 'پروفایل',
    '/dashboard/settings': 'تنظیمات',
    '/dashboard/products': 'محصولات',
};

interface ResponsiveSidebarProps {
    drawerOpen: boolean;
    onDrawerClose: () => void;
    drawerVariant: 'temporary' | 'persistent' | 'permanent';
    drawerWidth: number;
    isCollapsed: boolean;
    onToggleCollapse: () => void;
}

export const ResponsiveSidebar: React.FC<ResponsiveSidebarProps> = ({
    drawerOpen,
    onDrawerClose,
    drawerVariant,
    drawerWidth,
    isCollapsed,
    onToggleCollapse,
}) => {
    const pathname = usePathname();
    const router = useRouter();
    const theme = useTheme();
    const isMobile = useMediaQuery(theme.breakpoints.down('md'));

    const [expandedItems, setExpandedItems] = useState<string[]>([]);
    const [navItems, setNavItems] = useState<NavItem[]>([]);
    const [loading, setLoading] = useState(true);
    const [currentUser, setCurrentUser] = useState<any>(null);

    // دریافت مجوزهای کاربر
    useEffect(() => {
        fetchUserPermissions();
        fetchCurrentUser();
    }, []);

    const fetchCurrentUser = async () => {
        try {
            const response = await fetch('/api/auth/me');
            const data = await response.json();
            if (data.success) {
                setCurrentUser(data.data);
            }
        } catch (error) {
            console.error('Error fetching user:', error);
        }
    };

    const fetchUserPermissions = async () => {
        try {
            setLoading(true);
            const response = await fetch('/api/auth/permissions');
            const data = await response.json();

            if (data.success) {
                const modules: Module[] = data.data;
                const convertedNavItems = convertModulesToNavItems(modules);
                setNavItems(convertedNavItems);
            } else {
                console.error('Failed to fetch permissions:', data.message);
                setNavItems(getDefaultNavItems());
            }
        } catch (error) {
            console.error('Error fetching permissions:', error);
            setNavItems(getDefaultNavItems());
        } finally {
            setLoading(false);
        }
    };

    const getDefaultNavItems = (): NavItem[] => [
        {
            title: 'داشبورد',
            href: '/dashboard',
            icon: DashboardIcon,
        },
        {
            title: 'پروفایل',
            href: '/dashboard/profile',
            icon: UserIcon,
        }
    ];

    const convertModulesToNavItems = (modules: Module[]): NavItem[] => {
        const filteredModules = modules
            .filter(module => module.route && module.route !== '#')
            .sort((a, b) => (a.sort_order || 0) - (b.sort_order || 0));

        const navItems: NavItem[] = [];

        // گروه‌بندی ماژول‌ها
        const salesModules = filteredModules.filter(m =>
            ['sales', 'sales_opportunities', 'deals', 'products'].includes(m.name)
        );

        const cemModules = filteredModules.filter(m =>
            ['customers', 'contacts', 'feedback', 'feedback_new', 'surveys', 'customer_health', 'customer_club'].includes(m.name)
        );

        const teamModules = filteredModules.filter(m =>
            ['coworkers', 'activities', 'tasks', 'calendar'].includes(m.name)
        );

        const aiAnalyticsModules = filteredModules.filter(m =>
            ['reports_analysis'].includes(m.name)
        );

        const projectModules = filteredModules.filter(m =>
        );

        // اضافه کردن داشبورد
        const dashboardModule = filteredModules.find(m => m.name === 'dashboard');
        if (dashboardModule) {
            navItems.push({
                title: routeDisplayNames[dashboardModule.route] || dashboardModule.display_name,
                href: dashboardModule.route,
                icon: iconMap[dashboardModule.icon] || DashboardIcon,
            });
        }

        // اضافه کردن مدیریت فروش
        if (salesModules.length > 0) {
            navItems.push({
                title: 'مدیریت فروش',
                href: '/dashboard/sales',
                icon: TrendingUp,
                children: salesModules.map(module => ({
                    title: routeDisplayNames[module.route] || module.display_name,
                    href: module.route,
                    icon: iconMap[module.icon] || TrendingUp,
                })),
            });
        }

        // اضافه کردن مدیریت تجربه مشتری
        if (cemModules.length > 0) {
            navItems.push({
                title: 'مدیریت تجربه مشتری',
                href: '/dashboard/cem',
                icon: UsersIcon,
                children: cemModules.map(module => ({
                    title: routeDisplayNames[module.route] || module.display_name,
                    href: module.route,
                    icon: iconMap[module.icon] || UsersIcon,
                })),
            });
        }

        // اضافه کردن مدیریت همکاران
        if (teamModules.length > 0) {
            navItems.push({
                title: 'مدیریت همکاران',
                href: '/dashboard/coworkers',
                icon: ActivityIcon,
                children: teamModules.map(module => ({
                    title: routeDisplayNames[module.route] || module.display_name,
                    href: module.route,
                    icon: iconMap[module.icon] || ActivityIcon,
                })),
            });
        }

        // چت
        navItems.push({
            title: 'چت',
            href: '/dashboard/chat',
            icon: MessageCircleIcon,
        });

        // باشگاه مشتریان و ایمیل
        navItems.push({
            title: 'باشگاه مشتریان و ایمیل',
            href: '/dashboard/customer-club',
            icon: UsersIcon,
        });

        // تست ایمیل
        navItems.push({
            title: '🧪 تست ایمیل',
            href: '/test-email',
            icon: MailIcon,
        });

        // هوش مصنوعی و تحلیل
        if (aiAnalyticsModules.length > 0) {
            navItems.push({
                title: 'هوش مصنوعی و تحلیل',
                href: '/dashboard/insights',
                icon: BarChart3Icon,
                children: [
                    ...aiAnalyticsModules.map(module => ({
                        title: routeDisplayNames[module.route] || module.display_name,
                        href: module.route,
                        icon: iconMap[module.icon] || BarChart3Icon,
                    })),
                    {
                        title: 'تحلیل صوتی',
                        href: '/dashboard/insights/audio-analysis',
                        icon: BrainIcon,
                    }
                ],
            });
        }

        // پروژه‌ها
        if (projectModule) {
            navItems.push({
                title: 'پروژه‌ها',
                icon: BriefcaseIcon,
            });
        }

        // محصولات
        const productsModule = projectModules.find(m => m.name === 'products');
        if (productsModule) {
            navItems.push({
                title: 'محصولات',
                href: '/dashboard/products',
                icon: PackageIcon,
            });
        }

        return navItems;
    };

    // تغییر حالت باز/بسته آیتم‌های فرعی
    const toggleExpanded = (title: string) => {
        setExpandedItems(prev => {
            if (prev.includes(title)) {
                return prev.filter(item => item !== title);
            }
            return [title];
        });
    };

    // رندر آیتم‌های ناوبری
    const renderNavItem = (item: NavItem, level = 0) => {
        const isActive = pathname === item.href;
        const isExpanded = expandedItems.includes(item.title);
        const hasChildren = item.children && item.children.length > 0;
        const IconComponent = item.icon;

        if (hasChildren) {
            return (
                <React.Fragment key={item.title}>
                    <ListItem disablePadding sx={{ display: 'block' }}>
                        <Tooltip title={isCollapsed ? item.title : ''} placement="left">
                            <ListItemButton
                                selected={isActive}
                                onClick={() => {
                                    if (isCollapsed && !isMobile) {
                                        onToggleCollapse();
                                    } else {
                                        toggleExpanded(item.title);
                                    }
                                }}
                                sx={{
                                    minHeight: 48,
                                    justifyContent: isCollapsed ? 'center' : 'initial',
                                    px: 2.5,
                                }}
                            >
                                <ListItemIcon
                                    sx={{
                                        minWidth: 0,
                                        mr: isCollapsed ? 0 : 3,
                                        justifyContent: 'center',
                                        color: isActive ? theme.palette.primary.main : 'inherit',
                                    }}
                                >
                                    <IconComponent />
                                </ListItemIcon>
                                {!isCollapsed && (
                                    <>
                                        <ListItemText
                                            primary={item.title}
                                            sx={{
                                                opacity: 1,
                                                '& .MuiListItemText-primary': {
                                                    fontSize: '0.9rem',
                                                    fontWeight: isActive ? 600 : 400,
                                                }
                                            }}
                                        />
                                        {item.badge && (
                                            <Badge badgeContent={item.badge} color="secondary" sx={{ mr: 1 }} />
                                        )}
                                        {isExpanded ? <ExpandLess /> : <ExpandMore />}
                                    </>
                                )}
                            </ListItemButton>
                        </Tooltip>
                    </ListItem>
                    {!isCollapsed && (
                        <Collapse in={isExpanded} timeout="auto" unmountOnExit>
                            <List component="div" disablePadding>
                                {item.children?.map((child) => renderNavItem(child, level + 1))}
                            </List>
                        </Collapse>
                    )}
                </React.Fragment>
            );
        }

        return (
            <ListItem key={item.title} disablePadding sx={{ display: 'block' }}>
                <Tooltip title={isCollapsed ? item.title : ''} placement="left">
                    <ListItemButton
                        selected={isActive}
                        onClick={() => {
                            router.push(item.href);
                            if (isMobile) {
                                onDrawerClose();
                            }
                        }}
                        sx={{
                            minHeight: 48,
                            justifyContent: isCollapsed ? 'center' : 'initial',
                            px: 2.5,
                            ml: level > 0 ? 2 : 0,
                        }}
                    >
                        <ListItemIcon
                            sx={{
                                minWidth: 0,
                                mr: isCollapsed ? 0 : 3,
                                justifyContent: 'center',
                                color: isActive ? theme.palette.primary.main : 'inherit',
                            }}
                        >
                            <IconComponent />
                        </ListItemIcon>
                        {!isCollapsed && (
                            <>
                                <ListItemText
                                    primary={item.title}
                                    sx={{
                                        opacity: 1,
                                        '& .MuiListItemText-primary': {
                                            fontSize: level > 0 ? '0.8rem' : '0.9rem',
                                            fontWeight: isActive ? 600 : 400,
                                        }
                                    }}
                                />
                                {item.badge && (
                                    <Badge badgeContent={item.badge} color="secondary" />
                                )}
                            </>
                        )}
                    </ListItemButton>
                </Tooltip>
            </ListItem>
        );
    };

    // محتوای drawer
    const drawerContent = (
        <Box sx={{ display: 'flex', flexDirection: 'column', height: '100%' }}>
            {/* هدر sidebar بهبود یافته */}
            <Box
                sx={{
                    p: 2.5,
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'space-between',
                    borderBottom: '1px solid',
                    borderBottomColor: 'divider',
                    background: `linear-gradient(135deg, ${alpha(theme.palette.primary.main, 0.05)} 0%, ${alpha(theme.palette.info.main, 0.05)} 100%)`,
                    position: 'relative',
                    '&::after': {
                        content: '""',
                        position: 'absolute',
                        bottom: 0,
                        left: 0,
                        right: 0,
                        height: '2px',
                        background: `linear-gradient(90deg, ${theme.palette.primary.main} 0%, ${theme.palette.secondary.main} 50%, ${theme.palette.info.main} 100%)`,
                    }
                }}
            >
                {!isCollapsed && (
                    <Fade in={!isCollapsed} timeout={300}>
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1.5 }}>
                            <Avatar
                                sx={{
                                    width: 40,
                                    height: 40,
                                    background: `linear-gradient(135deg, ${theme.palette.primary.main} 0%, ${theme.palette.info.main} 100%)`,
                                    color: theme.palette.primary.contrastText,
                                    fontWeight: 'bold',
                                    fontSize: '1.1rem',
                                    boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)',
                                }}
                            >
                                {currentUser?.name?.charAt(0) || 'C'}
                            </Avatar>
                            <Box>
                                <Typography variant="subtitle1" noWrap sx={{ fontWeight: 600, color: 'text.primary' }}>
                                    {currentUser?.name || 'CRM سیستم'}
                                </Typography>
                                <Typography variant="caption" color="text.secondary" noWrap sx={{ fontSize: '0.75rem' }}>
                                    {currentUser?.email || 'سیستم مدیریت'}
                                </Typography>
                            </Box>
                        </Box>
                    </Fade>
                )}

                {!isMobile && (
                    <Tooltip title={isCollapsed ? 'باز کردن منو' : 'جمع کردن منو'} placement="left">
                        <IconButton
                            onClick={onToggleCollapse}
                            size="small"
                            sx={{
                                bgcolor: alpha(theme.palette.primary.main, 0.1),
                                '&:hover': {
                                    bgcolor: alpha(theme.palette.primary.main, 0.2),
                                    transform: 'scale(1.1)',
                                },
                                transition: 'all 0.2s ease-in-out',
                            }}
                        >
                            {isCollapsed ? <ChevronRight /> : <ChevronLeft />}
                        </IconButton>
                    </Tooltip>
                )}

                {isMobile && (
                    <IconButton
                        onClick={onDrawerClose}
                        size="small"
                        sx={{
                            bgcolor: alpha(theme.palette.error.main, 0.1),
                            '&:hover': {
                                bgcolor: alpha(theme.palette.error.main, 0.2),
                            },
                        }}
                    >
                        <CloseIcon />
                    </IconButton>
                )}
            </Box>

            {/* لیست ناوبری */}
            <Box sx={{ flexGrow: 1, overflow: 'auto' }}>
                <List sx={{ pt: 1 }}>
                    {loading ? (
                        <Box sx={{ p: 2, textAlign: 'center' }}>
                            <Typography variant="body2" color="text.secondary">
                                در حال بارگذاری...
                            </Typography>
                        </Box>
                    ) : (
                        navItems.map((item) => renderNavItem(item))
                    )}
                </List>
            </Box>

            {/* فوتر sidebar بهبود یافته */}
            {!isCollapsed && (
                <Box
                    sx={{
                        p: 2,
                        borderTop: '1px solid',
                        borderTopColor: 'divider',
                        background: `linear-gradient(135deg, ${alpha(theme.palette.secondary.main, 0.05)} 0%, ${alpha(theme.palette.primary.main, 0.05)} 100%)`,
                        position: 'relative',
                        '&::before': {
                            content: '""',
                            position: 'absolute',
                            top: 0,
                            left: 0,
                            right: 0,
                            height: '1px',
                            background: `linear-gradient(90deg, ${theme.palette.secondary.main} 0%, ${theme.palette.primary.main} 50%, ${theme.palette.info.main} 100%)`,
                        }
                    }}
                >
                    <Typography
                        variant="caption"
                        color="text.secondary"
                        align="center"
                        display="block"
                        sx={{
                            fontWeight: 500,
                            fontSize: '0.7rem',
                            letterSpacing: '0.5px'
                        }}
                    >
                        🚀 CRM سیستم مدیریت v2.0
                    </Typography>
                    <Typography
                        variant="caption"
                        color="text.secondary"
                        align="center"
                        display="block"
                        sx={{
                            fontSize: '0.65rem',
                            mt: 0.5,
                            opacity: 0.7
                        }}
                    >
                        رابین تجارت خاورمیانه
                    </Typography>
                </Box>
            )}
        </Box>
    );

    return (
        <StyledDrawer
            variant={drawerVariant}
            open={drawerOpen}
            onClose={onDrawerClose}
            ModalProps={{
                keepMounted: true, // بهتر برای موبایل
            }}
            sx={{
                width: isCollapsed && !isMobile ? 64 : drawerWidth,
                flexShrink: 0,
                '& .MuiDrawer-paper': {
                    width: isCollapsed && !isMobile ? 64 : drawerWidth,
                    boxSizing: 'border-box',
                    transition: theme.transitions.create('width', {
                        easing: theme.transitions.easing.easeInOut,
                        duration: theme.transitions.duration.standard,
                    }),
                },
            }}
        >
            {drawerContent}
        </StyledDrawer>
    );
}; 'use client';

import React, { useEffect, useState } from 'react';
import { usePathname, useRouter } from 'next/navigation';
import {
    Drawer,
    List,
    ListItem,
    ListItemButton,
    ListItemIcon,
    ListItemText,
    Box,
    Typography,
    IconButton,
    Tooltip,
    useTheme,
    Avatar,
    Badge,
    Collapse,
    Fade,
    useMediaQuery,
} from '@mui/material';
import { styled, alpha } from '@mui/material/styles';
import {
    ExpandLess,
    ExpandMore,
    Dashboard as DashboardIcon,
    People as UsersIcon,
    ContactPhone as ContactIcon,
    Assignment as TicketIcon,
    Chat as MessageCircleIcon,
    TrendingUp,
    BarChart as BarChart3Icon,
    Settings as SettingsIcon,
    ChevronLeft,
    ChevronRight,
    Business as Building2Icon,
    LocalActivity as ActivityIcon,
    CalendarToday as CalendarIcon,
    Work as BriefcaseIcon,
    MyLocation as TargetIcon,
    Description as FileTextIcon,
    Psychology as BrainIcon,
    Inventory as PackageIcon,
    Person as UserIcon,
    Email as MailIcon,
    Close as CloseIcon,
} from '@mui/icons-material';

// کامپوننت استایل شده برای Drawer با طراحی بهبود یافته
const StyledDrawer = styled(Drawer)(({ theme }) => ({
    '& .MuiDrawer-paper': {
        backgroundColor: alpha(theme.palette.background.paper, 0.98),
        backgroundImage: `linear-gradient(135deg, ${alpha(theme.palette.primary.main, 0.02)} 0%, ${alpha(theme.palette.secondary.main, 0.02)} 50%, ${alpha(theme.palette.info.main, 0.02)} 100%)`,
        overflowX: 'hidden',
        borderLeft: `1px solid ${alpha(theme.palette.divider, 0.1)}`,
        boxShadow: '0 8px 32px rgba(0, 0, 0, 0.12)',
        backdropFilter: 'blur(20px)',
        transition: theme.transitions.create(['width', 'margin', 'transform'], {
            easing: theme.transitions.easing.easeInOut,
            duration: theme.transitions.duration.standard,
        }),
        '&::-webkit-scrollbar': {
            width: '6px',
        },
        '&::-webkit-scrollbar-track': {
            background: 'transparent',
        },
        '&::-webkit-scrollbar-thumb': {
            background: `linear-gradient(135deg, ${alpha(theme.palette.primary.main, 0.6)} 0%, ${alpha(theme.palette.info.main, 0.6)} 100%)`,
            borderRadius: '8px',
            '&:hover': {
                background: `linear-gradient(135deg, ${theme.palette.primary.main} 0%, ${theme.palette.info.main} 100%)`,
            },
        },
    },
}));

interface NavItem {
    title: string;
    href: string;
    icon: React.ComponentType<any>;
    badge?: string;
    children?: NavItem[];
}

interface Module {
    id: string;
    name: string;
    display_name: string;
    route: string;
    icon: string;
    sort_order: number;
    parent_id?: string;
}

// نقشه آیکون‌ها
const iconMap: { [key: string]: React.ComponentType<any> } = {
    'Home': DashboardIcon,
    'LayoutDashboard': DashboardIcon,
    'Users': UsersIcon,
    'Users2': TargetIcon,
    'UserCheck': ContactIcon,
    'Activity': ActivityIcon,
    'MessageCircle': MessageCircleIcon,
    'MessageCircle2': MessageCircleIcon,
    'DollarSign': TrendingUp,
    'BarChart3': BarChart3Icon,
    'Calendar': CalendarIcon,
    'User': ContactIcon,
    'Settings': SettingsIcon,
    'Target': TargetIcon,
    'Briefcase': BriefcaseIcon,
    'Ticket': TicketIcon,
    'ChevronRight': ChevronRight,
    'Building2': Building2Icon,
    'TrendingUp': TrendingUp,
    'FileText': FileTextIcon,
    'Brain': BrainIcon,
    'Package': PackageIcon,
    'Mail': MailIcon,
};

// نقشه نام‌های نمایشی روت‌ها
const routeDisplayNames: { [key: string]: string } = {
    '/dashboard': 'داشبورد',
    '/dashboard/customers': 'مشتریان',
    '/dashboard/contacts': 'مخاطبین',
    '/dashboard/coworkers': 'همکاران',
    '/dashboard/activities': 'فعالیت‌ها',
    '/dashboard/chat': 'چت',
    '/dashboard/customer-club': 'باشگاه مشتریان',
    '/dashboard/deals': 'معاملات',
    '/dashboard/feedback': 'بازخوردها',
    '/dashboard/reports': 'گزارش‌ها',
    '/dashboard/daily-reports': 'گزارش‌های روزانه',
    '/dashboard/insights/reports-analysis': 'تحلیل گزارشات',
    '/dashboard/calendar': 'تقویم',
    '/dashboard/profile': 'پروفایل',
    '/dashboard/settings': 'تنظیمات',
    '/dashboard/products': 'محصولات',
};

interface ResponsiveSidebarProps {
    drawerOpen: boolean;
    onDrawerClose: () => void;
    drawerVariant: 'temporary' | 'persistent' | 'permanent';
    drawerWidth: number;
    isCollapsed: boolean;
    onToggleCollapse: () => void;
}

export const ResponsiveSidebar: React.FC<ResponsiveSidebarProps> = ({
    drawerOpen,
    onDrawerClose,
    drawerVariant,
    drawerWidth,
    isCollapsed,
    onToggleCollapse,
}) => {
    const pathname = usePathname();
    const router = useRouter();
    const theme = useTheme();
    const isMobile = useMediaQuery(theme.breakpoints.down('md'));

    const [expandedItems, setExpandedItems] = useState<string[]>([]);
    const [navItems, setNavItems] = useState<NavItem[]>([]);
    const [loading, setLoading] = useState(true);
    const [currentUser, setCurrentUser] = useState<any>(null);

    // دریافت مجوزهای کاربر
    useEffect(() => {
        fetchUserPermissions();
        fetchCurrentUser();
    }, []);

    const fetchCurrentUser = async () => {
        try {
            const response = await fetch('/api/auth/me');
            const data = await response.json();
            if (data.success) {
                setCurrentUser(data.data);
            }
        } catch (error) {
            console.error('Error fetching user:', error);
        }
    };

    const fetchUserPermissions = async () => {
        try {
            setLoading(true);
            const response = await fetch('/api/auth/permissions');
            const data = await response.json();

            if (data.success) {
                const modules: Module[] = data.data;
                const convertedNavItems = convertModulesToNavItems(modules);
                setNavItems(convertedNavItems);
            } else {
                console.error('Failed to fetch permissions:', data.message);
                setNavItems(getDefaultNavItems());
            }
        } catch (error) {
            console.error('Error fetching permissions:', error);
            setNavItems(getDefaultNavItems());
        } finally {
            setLoading(false);
        }
    };

    const getDefaultNavItems = (): NavItem[] => [
        {
            title: 'داشبورد',
            href: '/dashboard',
            icon: DashboardIcon,
        },
        {
            title: 'مدیریت فروش',
            href: '/dashboard/sales',
            icon: TrendingUp,
            children: [
                {
                    title: 'معاملات',
                    href: '/dashboard/deals',
                    icon: TrendingUp,
                }
            ]
        },
        {
            title: 'مدیریت تجربه مشتری',
            href: '/dashboard/cem',
            icon: UsersIcon,
            children: [
                {
                    title: 'مشتریان',
                    href: '/dashboard/customers',
                    icon: UsersIcon,
                },
                {
                    title: 'مخاطبین',
                    href: '/dashboard/contacts',
                    icon: ContactIcon,
                },
                {
                    title: 'بازخوردها',
                    href: '/dashboard/feedback',
                    icon: MessageCircleIcon,
                }
            ]
        },
        {
            title: 'مدیریت همکاران',
            href: '/dashboard/coworkers',
            icon: ActivityIcon,
            children: [
                {
                    title: 'همکاران',
                    href: '/dashboard/coworkers',
                    icon: UsersIcon,
                },
                {
                    title: 'فعالیت‌ها',
                    href: '/dashboard/activities',
                    icon: ActivityIcon,
                },
                {
                    title: 'تقویم',
                    href: '/dashboard/calendar',
                    icon: CalendarIcon,
                }
            ]
        },
        {
            title: 'چت',
            href: '/dashboard/chat',
            icon: MessageCircleIcon,
        },
        {
            title: 'باشگاه مشتریان',
            href: '/dashboard/customer-club',
            icon: UsersIcon,
        },
        {
            title: 'هوش مصنوعی و تحلیل',
            href: '/dashboard/insights',
            icon: BarChart3Icon,
            children: [
                {
                    title: 'تحلیل گزارشات',
                    href: '/dashboard/insights/reports-analysis',
                    icon: BarChart3Icon,
                },
                {
                    title: 'تحلیل صوتی',
                    href: '/dashboard/insights/audio-analysis',
                    icon: BrainIcon,
                }
            ]
        },
        
        {
            title: 'محصولات',
            href: '/dashboard/products',
            icon: PackageIcon,
        },
        {
            title: 'پروفایل',
            href: '/dashboard/profile',
            icon: UserIcon,
        }
    ];

    const convertModulesToNavItems = (modules: Module[]): NavItem[] => {
        const filteredModules = modules
            .filter(module => module.route && module.route !== '#')
            .sort((a, b) => (a.sort_order || 0) - (b.sort_order || 0));

        const navItems: NavItem[] = [];

        // گروه‌بندی ماژول‌ها
        const salesModules = filteredModules.filter(m =>
            ['sales', 'sales_opportunities', 'deals', 'products'].includes(m.name)
        );

        const cemModules = filteredModules.filter(m =>
            ['customers', 'contacts', 'feedback', 'feedback_new', 'surveys', 'customer_health', 'customer_club'].includes(m.name)
        );

        const teamModules = filteredModules.filter(m =>
            ['coworkers', 'activities', 'tasks', 'calendar'].includes(m.name)
        );

        const aiAnalyticsModules = filteredModules.filter(m =>
            ['reports_analysis'].includes(m.name)
        );

        const projectModules = filteredModules.filter(m =>
        );

        // اضافه کردن داشبورد
        const dashboardModule = filteredModules.find(m => m.name === 'dashboard');
        if (dashboardModule) {
            navItems.push({
                title: routeDisplayNames[dashboardModule.route] || dashboardModule.display_name,
                href: dashboardModule.route,
                icon: iconMap[dashboardModule.icon] || DashboardIcon,
            });
        }

        // اضافه کردن مدیریت فروش
        if (salesModules.length > 0) {
            navItems.push({
                title: 'مدیریت فروش',
                href: '/dashboard/sales',
                icon: TrendingUp,
                children: salesModules.map(module => ({
                    title: routeDisplayNames[module.route] || module.display_name,
                    href: module.route,
                    icon: iconMap[module.icon] || TrendingUp,
                })),
            });
        }

        // اضافه کردن مدیریت تجربه مشتری
        if (cemModules.length > 0) {
            navItems.push({
                title: 'مدیریت تجربه مشتری',
                href: '/dashboard/cem',
                icon: UsersIcon,
                children: cemModules.map(module => ({
                    title: routeDisplayNames[module.route] || module.display_name,
                    href: module.route,
                    icon: iconMap[module.icon] || UsersIcon,
                })),
            });
        }

        // اضافه کردن مدیریت همکاران
        if (teamModules.length > 0) {
            navItems.push({
                title: 'مدیریت همکاران',
                href: '/dashboard/coworkers',
                icon: ActivityIcon,
                children: teamModules.map(module => ({
                    title: routeDisplayNames[module.route] || module.display_name,
                    href: module.route,
                    icon: iconMap[module.icon] || ActivityIcon,
                })),
            });
        }

        // چت
        navItems.push({
            title: 'چت',
            href: '/dashboard/chat',
            icon: MessageCircleIcon,
        });

        // باشگاه مشتریان و ایمیل
        navItems.push({
            title: 'باشگاه مشتریان و ایمیل',
            href: '/dashboard/customer-club',
            icon: UsersIcon,
        });

        // تست ایمیل
        navItems.push({
            title: '🧪 تست ایمیل',
            href: '/test-email',
            icon: MailIcon,
        });

        // هوش مصنوعی و تحلیل
        if (aiAnalyticsModules.length > 0) {
            navItems.push({
                title: 'هوش مصنوعی و تحلیل',
                href: '/dashboard/insights',
                icon: BarChart3Icon,
                children: [
                    ...aiAnalyticsModules.map(module => ({
                        title: routeDisplayNames[module.route] || module.display_name,
                        href: module.route,
                        icon: iconMap[module.icon] || BarChart3Icon,
                    })),
                    {
                        title: 'تحلیل صوتی',
                        href: '/dashboard/insights/audio-analysis',
                        icon: BrainIcon,
                    }
                ],
            });
        }

        // پروژه‌ها
        if (projectModule) {
            navItems.push({
                title: 'پروژه‌ها',
                icon: BriefcaseIcon,
            });
        }

        // محصولات
        const productsModule = projectModules.find(m => m.name === 'products');
        if (productsModule) {
            navItems.push({
                title: 'محصولات',
                href: '/dashboard/products',
                icon: PackageIcon,
            });
        }

        return navItems;
    };

    // تغییر حالت باز/بسته آیتم‌های فرعی
    const toggleExpanded = (title: string) => {
        setExpandedItems(prev => {
            if (prev.includes(title)) {
                return prev.filter(item => item !== title);
            }
            return [title];
        });
    };

    // رندر آیتم‌های ناوبری
    const renderNavItem = (item: NavItem, level = 0) => {
        const isActive = pathname === item.href;
        const isExpanded = expandedItems.includes(item.title);
        const hasChildren = item.children && item.children.length > 0;
        const IconComponent = item.icon;

        if (hasChildren) {
            return (
                <React.Fragment key={item.title}>
                    <ListItem disablePadding sx={{ display: 'block' }}>
                        <Tooltip title={isCollapsed ? item.title : ''} placement="left">
                            <ListItemButton
                                selected={isActive}
                                onClick={() => {
                                    if (isCollapsed && !isMobile) {
                                        onToggleCollapse();
                                    } else {
                                        toggleExpanded(item.title);
                                    }
                                }}
                                sx={{
                                    minHeight: 48,
                                    justifyContent: isCollapsed ? 'center' : 'initial',
                                    px: 2.5,
                                }}
                            >
                                <ListItemIcon
                                    sx={{
                                        minWidth: 0,
                                        mr: isCollapsed ? 0 : 3,
                                        justifyContent: 'center',
                                        color: isActive ? theme.palette.primary.main : 'inherit',
                                    }}
                                >
                                    <IconComponent />
                                </ListItemIcon>
                                {!isCollapsed && (
                                    <>
                                        <ListItemText
                                            primary={item.title}
                                            sx={{
                                                opacity: 1,
                                                '& .MuiListItemText-primary': {
                                                    fontSize: '0.9rem',
                                                    fontWeight: isActive ? 600 : 400,
                                                }
                                            }}
                                        />
                                        {item.badge && (
                                            <Badge badgeContent={item.badge} color="secondary" sx={{ mr: 1 }} />
                                        )}
                                        {isExpanded ? <ExpandLess /> : <ExpandMore />}
                                    </>
                                )}
                            </ListItemButton>
                        </Tooltip>
                    </ListItem>
                    {!isCollapsed && (
                        <Collapse in={isExpanded} timeout="auto" unmountOnExit>
                            <List component="div" disablePadding>
                                {item.children?.map((child) => renderNavItem(child, level + 1))}
                            </List>
                        </Collapse>
                    )}
                </React.Fragment>
            );
        }

        return (
            <ListItem key={item.title} disablePadding sx={{ display: 'block' }}>
                <Tooltip title={isCollapsed ? item.title : ''} placement="left">
                    <ListItemButton
                        selected={isActive}
                        onClick={() => {
                            router.push(item.href);
                            if (isMobile) {
                                onDrawerClose();
                            }
                        }}
                        sx={{
                            minHeight: 48,
                            justifyContent: isCollapsed ? 'center' : 'initial',
                            px: 2.5,
                            ml: level > 0 ? 2 : 0,
                        }}
                    >
                        <ListItemIcon
                            sx={{
                                minWidth: 0,
                                mr: isCollapsed ? 0 : 3,
                                justifyContent: 'center',
                                color: isActive ? theme.palette.primary.main : 'inherit',
                            }}
                        >
                            <IconComponent />
                        </ListItemIcon>
                        {!isCollapsed && (
                            <>
                                <ListItemText
                                    primary={item.title}
                                    sx={{
                                        opacity: 1,
                                        '& .MuiListItemText-primary': {
                                            fontSize: level > 0 ? '0.8rem' : '0.9rem',
                                            fontWeight: isActive ? 600 : 400,
                                        }
                                    }}
                                />
                                {item.badge && (
                                    <Badge badgeContent={item.badge} color="secondary" />
                                )}
                            </>
                        )}
                    </ListItemButton>
                </Tooltip>
            </ListItem>
        );
    };

    // محتوای drawer
    const drawerContent = (
        <Box sx={{ display: 'flex', flexDirection: 'column', height: '100%' }}>
            {/* هدر sidebar بهبود یافته */}
            <Box
                sx={{
                    p: 2.5,
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'space-between',
                    borderBottom: '1px solid',
                    borderBottomColor: 'divider',
                    background: `linear-gradient(135deg, ${alpha(theme.palette.primary.main, 0.05)} 0%, ${alpha(theme.palette.info.main, 0.05)} 100%)`,
                    position: 'relative',
                    '&::after': {
                        content: '""',
                        position: 'absolute',
                        bottom: 0,
                        left: 0,
                        right: 0,
                        height: '2px',
                        background: `linear-gradient(90deg, ${theme.palette.primary.main} 0%, ${theme.palette.secondary.main} 50%, ${theme.palette.info.main} 100%)`,
                    }
                }}
            >
                {!isCollapsed && (
                    <Fade in={!isCollapsed} timeout={300}>
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1.5 }}>
                            <Avatar
                                sx={{
                                    width: 40,
                                    height: 40,
                                    background: `linear-gradient(135deg, ${theme.palette.primary.main} 0%, ${theme.palette.info.main} 100%)`,
                                    color: theme.palette.primary.contrastText,
                                    fontWeight: 'bold',
                                    fontSize: '1.1rem',
                                    boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)',
                                }}
                            >
                                {currentUser?.name?.charAt(0) || 'C'}
                            </Avatar>
                            <Box>
                                <Typography variant="subtitle1" noWrap sx={{ fontWeight: 600, color: 'text.primary' }}>
                                    {currentUser?.name || 'CRM سیستم'}
                                </Typography>
                                <Typography variant="caption" color="text.secondary" noWrap sx={{ fontSize: '0.75rem' }}>
                                    {currentUser?.email || 'سیستم مدیریت'}
                                </Typography>
                            </Box>
                        </Box>
                    </Fade>
                )}

                {!isMobile && (
                    <Tooltip title={isCollapsed ? 'باز کردن منو' : 'جمع کردن منو'} placement="left">
                        <IconButton
                            onClick={onToggleCollapse}
                            size="small"
                            sx={{
                                bgcolor: alpha(theme.palette.primary.main, 0.1),
                                '&:hover': {
                                    bgcolor: alpha(theme.palette.primary.main, 0.2),
                                    transform: 'scale(1.1)',
                                },
                                transition: 'all 0.2s ease-in-out',
                            }}
                        >
                            {isCollapsed ? <ChevronRight /> : <ChevronLeft />}
                        </IconButton>
                    </Tooltip>
                )}

                {isMobile && (
                    <IconButton
                        onClick={onDrawerClose}
                        size="small"
                        sx={{
                            bgcolor: alpha(theme.palette.error.main, 0.1),
                            '&:hover': {
                                bgcolor: alpha(theme.palette.error.main, 0.2),
                            },
                        }}
                    >
                        <CloseIcon />
                    </IconButton>
                )}
            </Box>

            {/* لیست ناوبری */}
            <Box sx={{ flexGrow: 1, overflow: 'auto' }}>
                <List sx={{ pt: 1 }}>
                    {loading ? (
                        <Box sx={{ p: 2, textAlign: 'center' }}>
                            <Typography variant="body2" color="text.secondary">
                                در حال بارگذاری...
                            </Typography>
                        </Box>
                    ) : (
                        navItems.map((item) => renderNavItem(item))
                    )}
                </List>
            </Box>

            {/* فوتر sidebar بهبود یافته */}
            {!isCollapsed && (
                <Box
                    sx={{
                        p: 2,
                        borderTop: '1px solid',
                        borderTopColor: 'divider',
                        background: `linear-gradient(135deg, ${alpha(theme.palette.secondary.main, 0.05)} 0%, ${alpha(theme.palette.primary.main, 0.05)} 100%)`,
                        position: 'relative',
                        '&::before': {
                            content: '""',
                            position: 'absolute',
                            top: 0,
                            left: 0,
                            right: 0,
                            height: '1px',
                            background: `linear-gradient(90deg, ${theme.palette.secondary.main} 0%, ${theme.palette.primary.main} 50%, ${theme.palette.info.main} 100%)`,
                        }
                    }}
                >
                    <Typography
                        variant="caption"
                        color="text.secondary"
                        align="center"
                        display="block"
                        sx={{
                            fontWeight: 500,
                            fontSize: '0.7rem',
                            letterSpacing: '0.5px'
                        }}
                    >
                        🚀 CRM سیستم مدیریت v2.0
                    </Typography>
                    <Typography
                        variant="caption"
                        color="text.secondary"
                        align="center"
                        display="block"
                        sx={{
                            fontSize: '0.65rem',
                            mt: 0.5,
                            opacity: 0.7
                        }}
                    >
                        رابین تجارت خاورمیانه
                    </Typography>
                </Box>
            )}
        </Box>
    );

    return (
        <StyledDrawer
            variant={drawerVariant}
            open={drawerOpen}
            onClose={onDrawerClose}
            ModalProps={{
                keepMounted: true, // بهتر برای موبایل
            }}
            sx={{
                width: isCollapsed && !isMobile ? 64 : drawerWidth,
                flexShrink: 0,
                '& .MuiDrawer-paper': {
                    width: isCollapsed && !isMobile ? 64 : drawerWidth,
                    boxSizing: 'border-box',
                    transition: theme.transitions.create('width', {
                        easing: theme.transitions.easing.easeInOut,
                        duration: theme.transitions.duration.standard,
                    }),
                },
            }}
        >
            {drawerContent}
        </StyledDrawer>
    );
};